"use strict";

/*
Copyright (c) 2016 Ramón Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* 
  LaCrosse weather sensor protocol
  
  See http://www.f6fbb.org/domo/sensors/tx3_th.php
*/

const utils = require('utils');

var tx3, ws;

// Calculate parity and CRC (TX3)
function calcLaCrosseParityCRC(data) {
	let crc = 0;
	let par = 0;
	for (let i = 0; i < (data.length >> 2) - 1; i++) {
		let val = Number(utils.bin2dec(data.slice(i * 4, (i + 1) * 4)));
		crc += val;
		if (i > 4 && i < 8) {
			par += (val & 0x1) + ((val >> 1) & 0x1)	+ ((val >> 2) & 0x1) + (val >> 3);
		}
	}
	return { par: par & 0x1, crc: crc & 0xf }
}

// Calculate parity and CRC (WS7000)
function calcLaCrosseWsParityCRC(data) {
	let crc = 5;
	let par = 0;
	let valid = true;
	for (let i = 0; i < data.length - 5; i = i + 5) {
		valid = valid || (data[i] == '1');
		let val = Number(utils.bin2dec(data.slice(1 + i, 5 + i)));
		crc += val;
		par ^= val;
	}
	return { par: par, crc: crc & 0xf, valid: valid }
}

// Decode the received data
function decodeLaCrosse(data) {
	let id = utils.bin2dec(data.slice(4, 11));
	let typeNr = Number(utils.bin2dec(data.slice(0, 4)));
	let result = {
		id: id,
		type: 'TH',
		data: {}
	}
	// Decode the data based on the type
	let value = utils.bin2dec(data.slice(12, 16)) + utils.bin2dec(data.slice(16, 20)) + '.' + utils.bin2dec(data.slice(20, 24));
	if (typeNr == 0) { // Thermo
		result.data.temperature = Number((value - 50.0).toFixed(1));
		tx3.debug('Temperature', result.data.temperature);
	} else if (typeNr == 0xe) { // Hygro
		result.data.humidity = Number(value);
		tx3.debug('Humidity', result.data.humidity);
	} else {
		result = 'Unknown type ' + typeNr;
	}
	
	return result;
}

// Decode the received data
function decodeLaCrosseWS(type, data) {
	let id = utils.bin2dec(data.slice(1, 5));
	let result = {
		id: id,
		type: type,
		data: {}
	}
	// TODO
	return result;
}

// Parse the data according to the LaCrosse protocol
var parseLaCrosseTX3 = function(payLoad) {
	let result = 'Not a valid LaCrosse message';
	tx3.debug(payLoad.length, payLoad);
	let decVal = payLoad.join('');
	let len = payLoad.length;
	if (decVal.slice(0, 8) === '00001010') {
		let checks = calcLaCrosseParityCRC(decVal);
		let check_par = Number(utils.bin2dec(decVal[8 + 11]));
		let check_crc = Number(utils.bin2dec(decVal.slice(len - 4, len)));
		if (checks.par == check_par) {
			if (checks.crc === check_crc) {
				result = decodeLaCrosse(decVal.slice(8));
			} else {
				result = 'CRC error for LaCrosse (' + checks.crc + ' vs ' + check_crc + ')';
			}
		} else {
			result = 'Parity error for LaCrosse (' + checks.par + ' vs ' + check_par + ')';
		}
	}
	return result;
}

const WS_len = {
	46: { type: 'R' },
	61: { type: 'W' },
	66: { type: 'UV' },
	81: { type: 'THB' }
}

// Parse the data according to the LaCrosse WS7000 protocol
var parseLaCrosseWS = function(payLoad) {
	let result = 'Not a valid LaCrosse message';
	tx3.debug(payLoad.length, payLoad);
	let decVal = payLoad.join('');
	let len = payLoad.length;
	if (decVal.slice(0, 11) === '00000000001') {
		let type = WS_len[len];
		if (type != null) {
			let checks = calcLaCrosseWsParityCRC(decVal.slice(10));
			let check_crc = Number(utils.bin2dec(decVal.slice(len - 5, len - 1)));
			if (checks.par == 0 && checks.valid) {
				if (checks.crc === check_crc) {
					result = decodeLaCrosseWS(type, decVal.slice(10));
				} else {
					result = 'CRC error for LaCrosse (' + checks.crc + ' vs ' + check_crc + ')';
				}
			} else {
				result = 'Validity error for LaCrosse (' + checks.valid + ' and ' + checks.par + ')';
			}
		} else {
			result = 'Not a known message type of length ' + len;
		}
	}
	return result;
}

module.exports = {
	init: () => {
		tx3 = new utils.WeatherSignal({
			id: 'lacrosse1',
			name: 'La Crosse TX3',
			hint: {
				en: 'Supports La Crosse TX3 weather sensors; this protocol is also used by some other brands like TFA',
				nl: 'Ondersteunt La Crosse TX3 sensoren; het protocol wordt ook door andere merken gebruikt (bv TFA)'
			},
			signal: 'LaCrosseTX3',
			parser: parseLaCrosseTX3
		})
		ws = new utils.WeatherSignal({
			id: 'lacrosse2',
			name: 'La Crosse WS7000',
			hint: {
				en: 'Supports La Crosse WS700 series',
				nl: 'Ondersteunt La Crosse WS7000 sensoren'
			},
			signal: 'LaCrosseWS',
			parser: parseLaCrosseWS
		})
	}
}