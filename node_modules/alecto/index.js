"use strict";

/*
Copyright (c) 2016 Ramón Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* 
  Alecto Protocol

  Only tested with a WS-1100
  
  See http://www.tfd.hu/tfdhu/files/wsprotocol/auriol_protocol_v20.pdf
*/

const utils = require('utils');


// CRC calculation for Alecto v2 & v3
// Taken from https://github.com/rinie/RFSniffer/blob/master/ScanDevices.ino
function calcAlectoCRC8(data, len) {
  let crc = 0;
  let x = 0;
  // Indicated changes are from reference CRC-8 function in OneWire library
  while (len--) {
    let inbyte = data[x++];
    for (let i = 0; i < 8; i++) {
      let mix = (crc ^ inbyte) & 0x80; // changed from & 0x01
      crc = (crc << 1) & 0xff; // changed from right shift
      if (mix) {
			crc ^= 0x31;// changed from 0x8C;
	  }
      inbyte = (inbyte << 1) & 0xff; // changed from right shift
    }
  }
  return crc;
}

// Decode the received data
// TODO: find low-battery bit; check id and type position
function decodeAlectoV3(data) {
	let id = utils.bin2dec(data.slice(1, 9));
	let typeNr = Number(utils.bin2dec(data.slice(10, 12)));
	var result = {
		protocol: 'Alecto',
		id: id,
		channel: Number(utils.bin2dec(data.slice(2, 4))) + 1,
		type: (typeNr == 4 ? 'R' : 'TH'),
		data: {}
	}
	// Decode the data based on the type
	let temperature = Number((utils.bin2dec(data.slice(13, 24)) / 10 - 40).toFixed(1));
	if (typeNr != 4) { // temperature/humidity
		let humidity = utils.bin2dec(data.slice(24, 32));
		result.data = {
			temperature: temperature, 
			humidity: Number(humidity)
		}
	} else { // Rain sensor (WS-1200)
		var rain = utils.bin2dec(data.slice(32, 40)) * 256 + utils.bin2dec(data.slice(24, 32));
		result.data = {
			temperature: temperature, 
			rainrate: rain * 0.3
		}
	}
	result.lowbattery = (data[0] == '1');
	result.data.button = (data[12] == '1');
	
	return result;
}

// Parste the data according to the Alecto v3 protocol
var parseAlectoV3 = function(payLoad) {
	utils.debug(payLoad.length, payLoad);
	var result = 'Not a valid Alecto message';
	let crc, check;
	let decVal;
	if (payLoad.length == 47 && payLoad.slice(0,7).join('') == '1111111') {
		// Remove first 7 values
		payLoad = payLoad.slice(7);
		decVal = payLoad.join('');
		let crcVals = [];
		for (var i = 0; i < 4; i++) {
			crcVals[i] = Number(utils.bin2dec(decVal.slice(8 * i, 8 * (i + 1))));
		}
		crc = calcAlectoCRC8(crcVals, 4);
		check = Number(utils.bin2dec(decVal.slice(32, 40)));
	} else if (payLoad.length == 63) {
		// Remove first 7 values
		payLoad = payLoad.slice(7);
		decVal = payLoad.join('');
		let crcVals = [];
		for (var i = 0; i < 6; i++) {
			crcVals[i] = Number(utils.bin2dec(decVal.slice(8 * i, 8 * (i + 1))));
		}
		crc = calcAlectoCRC8(crcVals, 6);
		check = Number(utils.bin2dec(decVal.slice(48, 56)));
	}
	if (crc !== undefined) {
		if (crc === check) {
			result = decodeAlectoV3(decVal);
		} else {
			result = 'CRC error for Alecto v3 (' + crc + ' vs ' + check + ')';
		}
	}
	return result;
}

module.exports = {
	parsev3: parseAlectoV3
};