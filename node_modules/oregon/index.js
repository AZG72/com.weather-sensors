"use strict";

/*
Copyright (c) 2016 Ramón Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* 
 Orgeon Scientific RF protocol
 Version 2: 
  - Freq. 1024 Hz = 976.5625 us / 2 = 488.28125 us (pulse is 93 us shorter)
  - Coding: 0 = '1001'; 1 = '0110'
  - Preamble:  16 x 1, ie. '0110'
  - Sync: '1010', i.e. '1001', '0110', '1001', '0110'
  - Total sof: 32 + 8 = 40
 Version 3: 
  - Freq. 1024 Hz = 976.5625 us / 2 = 488.28125 us (pulse is 138 us shorter)
  - Coding: 0 = '10'; 1 = '01'
  - Preamble:  24 x 1, ie. '01'
  - Sync: '1010', i.e. '10', '01', '10', '01'
  - Total sof: 24 + 4 = 28
*/

const utils = require('utils');

const dataLayouts = {
	'TH1': {
		len: 7,
		data: { 
			temperature: { start: 0, len: 3, div: 10 },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			unknown: { start: 6, len: 1 }
		}
	},
	'T1': {
		len: 4,
		data: {
			temperature: { start: 0, len: 3, div: 10 },
			sign: { start: 3, len: 1 }
		}
	},
	'UV1': {
		len: 4,
		data: {
			uvindex: { start: 0, len: 2 },
			unknown: { start: 2, len: 2 }
		}
	},
	'UV2': {
		len: 5,
		data: {
			unknown: { start: 0, len: 3 },
			uvindex: { start: 3, len: 2 }
		}
	},
	'W1': {
		len: 9,
		data: {
			direction: { start: 0, len: 1, enc: 'bin' },
			unknown: { start: 1, len: 2 },
			currentspeed: { start: 3, len: 3, div: 10 },
			averagespeed: { start: 6, len: 3, div: 10 }
		}
	},
	'R1': {
		len: 10,
		data: {
			rainrate: { start:0, len: 4, div: 100 },  // 0.01 inch/hr
			raintotal: { start: 4, len: 6, div: 1000 } // 0.001 inch
		}
	},
	'R2': {
		len: 8,
		data: {
			rainrate: { start:0, len: 4, div: 10 },   // 0.1 mm/hr
			raintotal: { start: 4, len: 4, div: 10 }  // 0.1 mm
		}
	},
	'THB': {
		len: 10, // 11 ?
		data: {
			temperature: { start: 0, len: 3, div: 10 },
			sign: { start: 3, len: 1 },
			humidity: { start: 4, len: 2 },
			comfort: { start: 6, len: 1, map: 
				{ 0: 'Normal', 4: 'Comfortable', 8: 'Dry', c: 'Wet' }
			},
			pressure: { start: 7, len: 2, add: 856 }, // mbar
			forecast: { start: 9, len: 1, map: 
				{ 2: 'Cloudy', 3: 'Rainy', 6: 'Partly cloudy', c: 'Sunny' }
			}
		}
	}
}

const knownSensors = {
	'1984': { name: 'WGR800', layout: 'W1' },
	'1994': { name: 'WGR800', layout: 'W1' },
	'1d20': { name: 'THGN123N/THGR122NX', layout:'TH1' },
	'1a2d': { name: 'THGR228N' },
	'1d30': { name: 'THGN500' },
	'1a3d': { name: 'THGR918' },
	'2914': { name: 'PCR800', layout: 'R1' },
	'2a1d': { name: 'RGR918' },
	'2d10': { name: 'RGR968', layout: 'R2' },
	'3a0d': { name: 'STR918/WGR918' },
	'5a5d': { name: 'BTHR918' },
	'5d60': { name: 'BTHR918N/BTHR968', layout: 'THB' },
	'c844': { name: 'THWR800', layout: 'T1' },
	'd874': { name: 'UVN800', layout: 'UV2' },
	'ec40': { name: 'THN132N/THR238NF', layout: 'T1' },
	'ea4c': { name: 'THWR288A' },
	'ec70': { name: 'UVR128', layout: 'UV1' },
	'f824': { name: 'THGN800/THGN801/THGR810', layout:'TH1' },
	'f8b4': { name: 'THGR810', layout:'TH1' }
}

// calcChecksum
function calcChecksum(data, end) {
	var slice = data.slice(end + 4, end + 8) + data.slice(end, end + 4);
	utils.debug(slice);
	var check = Number(utils.bin2dec(slice));
	utils.debug('Read checksum: ' + check);
	var checksum = 0;
	for (var i = 0; i < end / 4; i++) {
		var nibble = data.slice(i * 4, i * 4 + 4);
		checksum += Number(utils.bin2dec(nibble));
	}
	utils.debug('Calculated checksum:', checksum);
	return (checksum == check);
}

// decodeOregonData
function decodeOregonData(data) {
	var id = ('0000' + utils.bin2hex(data.slice(0, 16))).slice(-4);
    utils.debug('Device id hex', id);
	var values = id;

	var layout = (knownSensors[id] != null ? knownSensors[id].layout : null);
	if (dataLayouts[layout] != null) {
		// Check the checksum before we start decoding
		var pos = 32 + 4 * dataLayouts[layout].len;
		var valid = calcChecksum(data, pos);

		// Decode the values if the payload is valid
		if (valid) {
			utils.debug('Sensor type:', knownSensors[id].name);
			
			// Nibble 5 is the channel
			var channel = utils.bin2dec(data.slice(16, 20));
			utils.debug('Channel number:', channel);

			// Nibble 6 & 7 contain the rolling code
			var rollingCode = utils.bin2hex(data.slice(20, 28));
			utils.debug('Rolling code:', rollingCode);

			// Nibble 8 contains the flags
			// bit 2 (0x4) is the low battery indicator
			var flagnibble = data.slice(28, 32);
			utils.debug('Flag nibble:', flagnibble);

			var lowbattery = flagnibble[1] == '1';
			utils.debug('Low battery:', lowbattery);
			
			// Store the results so far
			values = {
				protocol: 'Oregon',
				type: knownSensors[id].layout.replace(/[0-9]/g, ''),
				name: knownSensors[id].name,
				layout: knownSensors[id].layout,
				id: id,
				channel: channel,
				rolling: rollingCode,
				lowbattery: lowbattery,
				data: {}
			};
			
			// Decode data part of the message
			data = data.slice(32);
			for (var p in dataLayouts[layout].data) {
				var value = 0;
				var elem = dataLayouts[layout].data[p];
				for (var i = elem.len - 1; i >= 0; i--) {
					var nibble = data.slice(4 * (elem.start + i), 4 * (elem.start + 1 + i));
					//utils.debug(nibble);
					if (elem.enc == null) {
						value += utils.bin2hex(nibble);
					} else if (elem.enc == 'bin') {
						value = utils.bin2dec(nibble);
					}
				}
				if (p == 'direction') {
					value *= 22.5;
				} else if (elem.map != null) {
					value = elem.map[value] || 'Unknown';
				} else if (p != 'unknown') {
					value = Number(value);
					if (elem.div != null) {
						value /= elem.div;
					}
					if (elem.add != null) {
						value += elem.add;
					}
				}
				values.data[p] = value;
				utils.debug('Data > ' + p + ':', value);
			}
			if (values.data.sign != null) {
				if (Number(values.data.sign) > 0) {
					values.data.temperature *= -1;
				}
				delete(values.data.sign);
			}
		} else {
			utils.debug('Checksum mismatch - ignoring message');
		}
	} else {
		utils.debug('Unknown sensor ID ' + id + '; ignoring...');
	}
	return values;
}


function parseOregonData(payLoad, version) {
    var payLoadString = utils.bitArrayToString(payLoad);
    var payLoadArray = utils.bitStringToBitArray(payLoadString);
    var data = payLoadArray;
	
	var str = '';
	for (var i = 0; i < payLoadString.length; i += 4) {
		str += payLoadString.slice(i, i + 4) + ' ';
	}
	utils.debug(str);

    utils.debug('data = array length ', data.length);
	
	if (version == 2) {
		// first make data length even
		console.log("array length is not even", data.length % 2 != 0);
		if (data.length % 2 != 0) {
			data.splice(data.length - 1, 1);
		};

		utils.debug('array length after making even', data.length);

		// v2.1 first extract all uneven bits, they are inverted message
		for (var i = data.length - 1; i >= 0; i--) {
			//  utils.debug('data i ', i);
			if (i % 2 != 0) {
				data.splice(i, 1);
			};
		};
		utils.debug('array length after removing uneven bits', data.length);
	}
	
	// Remove incomplete nibble if present
	var extra = data.length % 4;
	if (extra != 0) {
		utils.debug('Removing incomplete nibble from message');
		data.splice(data.length - extra, extra);
		utils.debug('data = array length', data.length);
	}
	
    // Flip the nibbles and make a string from the array
    var datastring = '';
	for (var i = 0; i < data.length; i += 4) {
		datastring += (data.slice(i, i + 4)).reverse().join('');
	}
	
	// Decode the data part
	var result = decodeOregonData(datastring);
	
	return result;
};

module.exports = {
	parsev2: (x) => parseOregonData(x, 2),
	parsev3: (x) => parseOregonData(x, 3)
}