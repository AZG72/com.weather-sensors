"use strict";

/*
Copyright (c) 2017 Ram√≥n Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* 
  UPM/ESIC Protocol
  
  Uses Differential Manchester encoding (Biphase Mark Code)

  See http://ala-paavola.fi/jaakko/doku.php?id=wt450h
  and http://wiki.nethome.nu/doku.php/upmprotocol
*/

const utils = require('utils');

let upm;

// Calculate parity
function calcUPMParity(values) {
	let sum = 0;
	for (let i = 0; i < values.length; i++) {
		sum += values[i];
	}
	return (sum % 1 === 0);
}

// Decode the Esic data
/*
	c c c c  d d 1 1 b S S S  s s s s 0 P P P  p p p p p p p p  z z C C
	0 1 2 3  4 5 6 7 8 9 0 1 12 3 4 5 6 7 8 9 20 1 2 3 4 5 6 7 28 9 9 1
*/
function decodeUPM(data) {
	let hc = Number(utils.bin2dec(data.slice(0, 4)));
	let channel = Number(utils.bin2dec(data.slice(4, 6))) + 1;
	let type = (hc === 2 && channel === 2) ? 'W' : (hc === 2 && channel === 3) ? 'R' : 'TH';
	let result = {
		id: hc,
		type: type,
		channel: channel,
		data: { lowbattery: data[8] == '1' }
	}
	if (type === 'TH') {
		result.data.humidity = Number(utils.bin2dec(data.slice(9, 16)));
		result.data.temperature = utils.bin2dec(data.slice(17, 28)) / 16 - 50;
	} else if (type === 'R') {
		result.data.rainrate = utils.bin2dec(data.slice(17, 28)) * 0.7;
	} else if (type === 'W') {
		result.data.direction = utils.bin2dec(data.slice(9, 16)) * 45;
		result.data.currentspeed = utils.bin2dec(data.slice(17, 28)) / 3.6;
	}
	
	return result;
}

// Parse the data according to the UPM/Esic protocol
var parseUPM = function(payLoad) {
	let result = 'Not a valid message';
	let decVal = payLoad.join('');
	let len = payLoad.length;
	if (decVal.slice(0, 4) === '1100' && decVal.slice(10, 12) === '11') {
		if (calcUPMParity(payLoad)) {
			result = decodeUPM(decVal.slice(4));
		} else {
			result = 'Parity error for UPM';
		}
	}

	return result;
}

module.exports = {
	init: () => {
		upm = new utils.WeatherSignal({
			id: 'upm',
			name: 'UPM/Esic',
			hint: { 
				en: 'Development for WT440H (UPM, Esic, DMV, Clas Ohlson)',
				nl: 'Ontwikkeling voor WT440H (UPM, Esic, DMV, Clas Ohlson)',
			},
			signal: 'UPM',
			freq: 433,
			parser: parseUPM
		});
	}
};