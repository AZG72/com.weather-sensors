"use strict";

/*
Copyright (c) 2017 Marcel Mol

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
  Auriol Protocol
*/

const utils = require('utils');

var auriol;
/*
    # 4-bit nibbles: [id0] [id1], [stat], [temp0] [temp1] [temp2], [unk], [hum0], [hum2]
    #   The id changes when the battery is changed
    #   stat  bits: [bat ? chan chan]  bat = 1 when battery ok
    #   unk seems always to be 'F'
    #   temp is 12 bit 2-complements value scaled by 10
    #   hum is 8 bit humidity in %
*/

function decodeAuriol(data) {
  let id = utils.bin2dec(data.substr(0, 8));
  let batok = data.substr(8, 1);
  let channel = Number(utils.bin2dec(data.substr(10, 2))) + 1;
  let result = {
    id: id,
		channel: channel
  }
  let value = utils.bin2dec(data.substr(12, 12));
  if (value & 0x800) {
		value ^= 0xfff;
		value = -value - 1;
	}
  result.data = { temperature: value / 10 };
  let humidity = utils.bin2dec(data.substr(28, 8));
  if (humidity > 0) { // temp. only sensor if humidity is zero
    result.data.humidity = Number(humidity);
  }
  result.data.lowbattery = (batok === '0')

	auriol.debug('Id=', id, ' BatOk=', batok, ' Chan=', channel, ' Temp=', result.data.temperature, ' Hum=', result.data.humidity);

  return result;
}

var parseAuriol = function(payLoad) {
	let result = 'Not a valid Auriol message';
	let decVal = payLoad.join('');
	let len = payLoad.length;
  let check = decVal.substr(24, 4);
  if (check === '1111') {
		result = decodeAuriol(decVal);
	} else {
		result += ': Check error (not F): ' + check;
	}
	return result;
}

module.exports = {
	init: () => {
		auriol = new utils.WeatherSignal({
			id: 'auriol1',
			name: 'Auriol',
			hint: {
				en: 'Support for Auriol IAN85059 Z31130-TX and others',
				nl: 'Ondersteuning Auriol IAN85059 Z31130-TX en andere',
			},
			signal: 'AuriolZ31130',
			freq: 433,
			parser: parseAuriol
		});
	}
};
