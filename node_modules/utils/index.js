"use strict";

/*
Copyright (c) 2016 Ramón Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var debugOn = false;

const resultFields = {
	temperature: { min: -20, max: 100, types: { TH: true, THB: true } },
	humidity: { min: 0, max: 100, types: { TH: true, THB: true } },
	pressure: { min: 850, max: 1100, types: { THB: true } },
	raintotal: { min: 0, max: null, types: { R: true } }, // m3
	rainrate: { min: 0, max: 50, types: { R: true } }, // mm
	direction: { min: 0, max: 360, types: { W: true } },
	currentspeed: { min: 0, max: 200, types: { W: true } }, // km/h
	averagespeed: { min: 0, max: 200, types: { W: true } }, // km/h
	uvindex: { min: 0, max: 45, types: { UV: true } }
};

class WeatherSignal {
	constructor(object) {
		this.data = object;
		// Statistic counters
		this.count = 0;
		this.ok = 0;
		this.error = 0;
		this.invalid = 0;
		this.lengths = {};
		// Last message
		this.payload = [];
		//this.result;
		WeatherSignal.signals.set(object.id, this);
	}
	// get: get a list of all signals or the WeatherSignal object
	static get(x) { 
		return (x === undefined ? Array.from(WeatherSignal.signals.keys()) : WeatherSignal.signals.get(x))
	}
	// getName: get the descriptive name of the signal
	getName() { return this.data.name }
	// getSignal: get the name of the Homey signal definition
	getSignal() { return { def: this.data.signal, freq: this.data.freq || 433 } }
	// getHint: get more information on the signal support
	getHint(locale) { return (this.data.hint !== undefined ? this.data.hint[locale] : undefined) }
	// parse: parse the data and return the result
	parse(data) {
		let result = this.data.parser(data);
		let now = new Date();
		let valid = false;
		this.count++;
		if (result != null && typeof result !== 'string') {
			this.result = result;
			this.result.protocol = this.data.id;
			this.result.lastupdate = now;
			if (this.validate(this.result)) {
				this.ok++;
				let len = data.length;
				this.lengths[len] = (this.lengths[len] || 0) + 1;
				valid = true;
			} else {
				this.invalid++;
			}
		} else {
			this.debug('Error:', result);
			this.error++;
		}
		this.payload.push({ 
			data: Array.from(data.values()).join(','),
			valid: valid,
			when: now
		});
		if (this.payload.length > 10) {
			this.payload.shift();
		}
		return valid;
	}
	// validate: validate the received result
	validate(result) {
		let valid = false;
		if (result != null && result.data != null) {
			valid = true;
			for (let field in result.data) {
				let check = resultFields[field];
				if (check != null) {
					if (result[field] < check.min || result[field] > check.max) {
						this.debug('Value out of range:', result[field], '(' + field + ')');
						valid = false;
					}
					if (check.types[result.type] === undefined) {
						this.debug('Field not valid for type', result.type, '(' + field + ')');
						valid = false;
					}
				}
			}
		}
		return valid;
	}
	// getResult: read the last result
	getResult() { return this.result }
	// getStatistics: return the error rate for this signal
	getStatistics() { 
		return { 
			total: this.count, 
			ok: ((this.ok / this.count) * 100 || 0).toFixed() + '%',
			error: ((this.error / this.count) * 100 || 0).toFixed() + '%',
			invalid: ((this.invalid / this.count) * 100 || 0).toFixed() + '%',
			lengths: this.lengths,
			payloads: this.payload,
			last: this.result
		}
	}
	// debug: debug specific for this ID
	debug() { debug('[' + this.data.id + ']', arguments) }
}
// Wait for ES7 before we can move this into the class
WeatherSignal.signals = new Map();

// Debug logging
function debug() {
	if (debugOn) {
		var now = new Date();
		var itemdebug = (x) => {
			var t = Object.prototype.toString.call(x);
			return (t === '[object Object]' ? JSON.stringify(x, null, 3) : (typeof x === 'object' ? JSON.stringify(x) : x)) + ' ' 
		};
		var time = now.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
		var ms = ('00' + now.getMilliseconds()).slice(-3);
		var text = '';
		for (var i = 0; i < arguments.length; i++) {
			var x = arguments[i];
			if (Object.prototype.toString.call(arguments[i]) === '[object Arguments]') {
				for (var j = 0; j < x.length; j++) {
					text += itemdebug(x[j]);
				}
			} else {
				text += itemdebug(x);
			}
		}
		Homey.log(time + '.' + ms, text.slice(0, -1));
	}
}

module.exports = {
	WeatherSignal,
	debug,
	setDebug: function(on) { debugOn = on },
	bin2dec: (x) => parseInt(x, 2).toString(10),
	bin2hex: (x) => parseInt(x, 2).toString(16),
	hex2dec: (x) => parseInt(x, 16).toString(10),
	dec2hex: (x) => parseInt(x, 10).toString(16)
};