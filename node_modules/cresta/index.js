"use strict";

/*
Copyright (c) 2016 Ramón Baas

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/* 
  Cresta / TFA weather sensor protocol

  See members.upc.nl/m.beukelaar/Crestaprotocol.pdf
*/

const utils = require('utils');

const cresta = {
	devices: { 12: 'W', 13: 'UV', 14: 'R', 30: 'TH' },
	channels: [0x20, 0x40, 0x60, 0xA0, 0xC0]
}

var cr;

// Decode the received data
function decodeCrestaData(data) {
	var typeNr = utils.hex2dec(data.substr(4, 2)) & 0x1f;
	var id = data.substr(0, 2);
	var channel = 0;
	var result = {
		id: id,
		channel: channel,
		type: cresta.devices[typeNr],
		data: {}
	}
	// TODO: Wind, UV & Rain
	if (typeNr == 30) { // temperature/humidity
		var temperature = data[9] + data[6] + '.' + data[7];
		var sign = (data[8] == 'c' ? 1 : -1);
		result.data = {
			temperature: sign * temperature, 
			humidity: Number(data.substr(10,2))
		}
		result.lowbattery = (data[2] != 'c');
		var cid = Number(utils.hex2dec(id));
		for (var c = 0; c < cresta.channels.length; c++) {
			if (cid >= cresta.channels[c]) {
				result.channel = c + 1;
			}
		}
	}
	
	return result;
}

// Parste the data according to the Cresta protocol
var parseCrestaData = function(payLoad) {
	var result = 'Not a valid Cresta message';
	var decode = (x) => { return ((x ^ (x << 1)) & 0xff) };
	cr.debug(payLoad.length, payLoad);
	// NOTE: we have 2 bits that shoudn't be there, which means the
	// Start Of Frame (sof) matching is not correct.
	// TODO: remove this when the matching is correct.
	var valid = (payLoad[0] == 0 && payLoad[1] == 0);
	payLoad = payLoad.slice(2);
	var decVal = '';
	var buf = [];
	for (var i = 0; i < payLoad.length; i += 9) {
		var valstr = payLoad.slice(i, i + 8).reverse().join('');
		var val1 = Number(utils.bin2dec(valstr));
		var val2 = decode(val1);
		decVal += ('00' + val2.toString(16)).slice(-2);
		valid = valid && (payLoad[i + 8] == 0);
		buf[i / 9] = val1;
	}
	var len = (utils.hex2dec(decVal.substr(2, 2)) >> 1) & 0x1f;
	cr.debug(decVal.length, decVal, valid, len);
	if ((4 + len * 2 == decVal.length)) {
		var cs = 0;
		for (var i = 0; i <= len; i++) {
			cs ^= buf[i];
		}
		if (valid && cs == 0) {
			result = decodeCrestaData(decVal);
		}
	}
	return result;
}

module.exports = {
	init: () => cr = new utils.WeatherSignal({
		id: 'cresta',
		name: 'Cresta / TFA',
		hint: {
			en: 'Supports various brands, like Cresta (eg WXR815), TFA Dostmann etc.',
			nl: 'Ondersteunt verschillende merken, zoals Cresta (eg WXR815), TFA Dostmann etc.'
		},
		signal: 'Cresta',
		parser: parseCrestaData
	})
}